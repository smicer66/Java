/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package shopscanmanager;

import ca.beq.util.win32.registry.RegistryKey;
import ca.beq.util.win32.registry.RegistryValue;
import ca.beq.util.win32.registry.RootKey;
import ca.beq.util.win32.registry.ValueType;
import java.awt.Color;
import java.awt.Component;
import java.awt.Frame;
import java.io.*;
import java.lang.reflect.InvocationTargetException;
import java.sql.*;
import java.util.ArrayList;
import java.util.Hashtable;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JPanel;

/**
 *
 * @author xkalibaer
 */
public class Settings extends javax.swing.JPanel {
    private Connection con;
    private final Mysql mysql;
    private String fileSelected="";
    private HomeScreen hs;

    /**
     * Creates new form Settings
     */
    public Settings(Connection con, Mysql mysql, HomeScreen hs) {
        this.con=con;
        this.mysql=mysql;
        this.hs=hs;
        initComponents();
        

    }
    
    public JPanel getJPanel1()
    {
        return jPanel1;
    }
    
    public JPanel getJPanel2()
    {
        return jPanel2;
    }
    
    
    public JPanel showScreen()
    {
        try {
            JPanel panel=new JPanel();
            this.jPanel4.setBackground(new Color(0x262624));
            this.jPanel1.setBackground(new Color(0x262624));
            this.jPanel2.setBackground(new Color(0x262624));
            this.jPanel3.setBackground(new Color(0x262624));
            this.jCheckBox1.setBackground(new Color(0x262624));
            this.jComboBox1.removeAllItems();
            this.jComboBox1.addItem("-Select An Item-");
            //PreparedStatement pr=con.prepareStatement("SELECT * FROM databasetypes WHERE status = 1");
            //ResultSet rs1=mysql.query(pr);
            String[] databaseTypes=new String[]{"MySql"};
                for(int count=0; count<databaseTypes.length; count++) { 
                    System.out.println("rs1.getString(title)=" + databaseTypes[count]);
                     this.jComboBox1.addItem(databaseTypes[count]);
                }
                
            this.jTextField6.setText(new UtilUse().GetMyDocuments());
            panel.setBackground(new Color(0x262624));
            this.setBackground(new Color(0x262624));
            panel.add(this);
            return this;
        } catch (Exception ex) {
            new UtilUse().Log(ex);
            Logger.getLogger(Settings.class.getName()).log(Level.SEVERE, null, ex);
            Hashtable h1=new Hashtable();
            h1.put("success", true);
            h1.put("message", "Application SetUp Page coult not be processed. Please reinstall and setup afresh");
            h1.put("operation", "Setting Up Application...");
            /*Frame[] f=HomeScreen.getFrames();
            for(int count5=0; count5<f.length; count5++)
            {
                System.out.println(f[count5].toString());
                HomeScreen h=((HomeScreen)f[count5]);*/
                this.hs.displayProcessMessage(h1);
            //}
            return this;
        }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel55 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jTextField6 = new javax.swing.JTextField();
        jComboBox1 = new javax.swing.JComboBox();
        jCheckBox1 = new javax.swing.JCheckBox();
        jButton1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jTextField7 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();

        jPanel2.setBackground(new java.awt.Color(51, 51, 51));

        jPanel3.setBackground(new java.awt.Color(42, 42, 42));
        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel55.setFont(new java.awt.Font("Arial", 1, 15)); // NOI18N
        jLabel55.setForeground(new java.awt.Color(204, 204, 204));
        jLabel55.setText("Application Settings");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jLabel55)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel55))
        );

        jPanel4.setBackground(new java.awt.Color(51, 51, 51));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(204, 204, 204));
        jLabel1.setText("Specify your default Installation folder:");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(204, 204, 204));
        jLabel2.setText("Choose your database:");

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(204, 204, 204));
        jLabel8.setText("Specify your database user:");

        jTextField3.setText("root");
        jTextField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField3ActionPerformed(evt);
            }
        });

        jTextField4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField4ActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(204, 204, 204));
        jLabel9.setText("Specify your database user's password:");

        jTextField5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField5ActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(204, 204, 204));
        jLabel10.setText("Specify your database port:");

        jButton2.setText("Choose a folder");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTextField6.setText("C:/");
        jTextField6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField6ActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jCheckBox1.setText("Automatically sync data to live server at intervals");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        jButton1.setText("Save Settings");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 153, 0));
        jLabel3.setText("Leave empty if not sure");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 153, 0));
        jLabel4.setText("Default is root");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 153, 0));
        jLabel5.setText("Default password is empty");

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(204, 204, 204));
        jLabel11.setText("Specify your host:");

        jTextField7.setText("localhost");
        jTextField7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField7ActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 153, 0));
        jLabel6.setText("Default host is localhost");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBox1)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel8)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel3))
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jTextField3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 183, Short.MAX_VALUE)
                            .addComponent(jTextField6, javax.swing.GroupLayout.Alignment.LEADING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton2)
                            .addComponent(jLabel4)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel5))
                    .addComponent(jButton1)
                    .addComponent(jLabel11)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel6)))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(18, 18, 18)
                .addComponent(jCheckBox1)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addContainerGap(32, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(480, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 711, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 837, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1173, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 837, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1173, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        String installFolder=this.jTextField6.getText().toString().trim() + "\\scanShopManager";
        int dbType=this.jComboBox1.getSelectedIndex();
        String dbUser=this.jTextField3.getText().toString().trim();
        String dbPass=this.jTextField4.getText().toString().trim();
        String dbHost=this.jTextField7.getText().toString().trim();
        String dbPort="";
        try
        {
            if(this.jTextField5.getText().toString().trim().length()>0)
            {
                dbPort=Integer.toString(Integer.parseInt(this.jTextField5.getText().toString().trim()));
            }
        }
        catch(NumberFormatException ex)
        {
            new UtilUse().Log(ex);
            /*Frame[] f=HomeScreen.getFrames();
            for(int count5=0; count5<f.length; count5++)
            {
                System.out.println(f[count5].toString());
                HomeScreen h=((HomeScreen)f[count5]);*/
                Hashtable processResult=new Hashtable();
                processResult.put("success", false);
                processResult.put("message", "Your port should be numeric");
                processResult.put("operation", "Setting Up Application...");
                this.hs.displayProcessMessage(processResult);
            //}
        }
        Boolean sinkYes=false;
        sinkYes=this.jCheckBox1.isSelected();
        //this.jButton1.setEnabled(false);
        Hashtable processResult=new Hashtable();
        
        
        if(installFolder.length()>0)
        {
            if(dbType>0)
            {
                if(dbUser.length()>0)
                {
                    PrintWriter writer = null;
                    try {
                        (new File(installFolder)).mkdirs();
                        (new File(installFolder + "/shop")).mkdirs();
                        (new File(installFolder + "/images")).mkdirs();
                        (new File(installFolder + "/qr_codes")).mkdirs();
                        (new File(installFolder + "/user")).mkdirs();
                        (new File(installFolder + "/asset_category")).mkdirs();
                        (new File(installFolder + "/bar_codes")).mkdirs();
                        (new File(installFolder + "/reports")).mkdirs();
                        
                        
                        System.out.println("We are in");
                        this.con=mysql.mysqlConnectToDb(dbHost, dbUser, dbPass);
                        Statement st = this.con.createStatement();
                        
                        ArrayList<String> list=new ArrayList();
                        DatabaseMetaData meta = con.getMetaData();
                        ResultSet rs = meta.getCatalogs();
                        while (rs.next()) {
                            String listofDatabases=rs.getString("TABLE_CAT");
                            //System.out.println(listofDatabases);
                            list.add(listofDatabases);
                        }
                        if(list.contains(UtilUse.DATABASE)){
                            st.executeUpdate("DROP DATABASE " + UtilUse.DATABASE);
                        }
                        st.executeUpdate("CREATE DATABASE " + UtilUse.DATABASE);
                        this.con=mysql.mysqlConnectToDb(dbHost, dbUser, dbPass, UtilUse.DATABASE);
                        st = this.con.createStatement();

                        String query="CREATE TABLE `activity_log` ("
                        + "`id` int(11) NOT NULL,"
                        + "`user_profile_id` int(11) NOT NULL,"
                        + "`activity_type_id` int(11) NOT NULL,"
                        + "`activity_date` datetime NOT NULL,"
                        + "PRIMARY KEY  (`id`)) ENGINE=InnoDB DEFAULT CHARSET=latin1;";
                        st.executeUpdate(query);

                        query="CREATE TABLE `activity_type` ("
                        + "`id` int(11) NOT NULL auto_increment,"
                        + "`activity_name` varchar(20) NOT NULL,"
                        + "PRIMARY KEY  (`id`),"
                        + "UNIQUE KEY `activity_name` (`activity_name`)) ENGINE=InnoDB DEFAULT CHARSET=latin1 ;";
                        st.executeUpdate(query);

                        query="INSERT INTO `activity_type` (`id`, `activity_name`) VALUES "
                        + "(3, 'Synchronization'),"
                        + "(2, 'User Login'),"
                        + "(1, 'User Registration');";
                        st.executeUpdate(query);


                        query="CREATE TABLE `address` ("
                        + "`id` int(11) NOT NULL auto_increment,"
                        + "`post_code` varchar(8) NOT NULL,"
                        + "`address_line1` text NOT NULL,"
                        + "`address_line2` text NOT NULL,"
                        + "`state_id` int(11) NOT NULL,"
                        + "`city` varchar(30) NOT NULL,"
                        + "`dateUpdated` datetime default NULL,"
                        + "PRIMARY KEY  (`id`)) ENGINE=InnoDB DEFAULT CHARSET=latin1 ;";
                        st.executeUpdate(query);


                        query="CREATE TABLE `billing` ("
                        + "`id` int(11) NOT NULL auto_increment,"
                        + "`billingDate` datetime NOT NULL,"
                        + "`amount` double(10,2) NOT NULL,"
                        + "`billingDetails` varchar(100) NOT NULL,"
                        + "`status` tinyint(4) NOT NULL,"
                        + "`user_profile_id` int(11) NOT NULL,"
                        + "`billing_card_id` int(11) NOT NULL,"
                        + "`billingCardDetails` blob,"
                        + "`shopItemId` int(11) NOT NULL,"
                        + "PRIMARY KEY  (`id`)) ENGINE=InnoDB DEFAULT CHARSET=latin1 ;";
                        st.executeUpdate(query);

                        query="CREATE TABLE `billing_card_type` ("
                        + "`id` int(11) NOT NULL auto_increment,"
                        + "`cardTypeName` varchar(20) NOT NULL,"
                        + "`status` tinyint(4) NOT NULL,"
                        + "PRIMARY KEY  (`id`),"
                        + "UNIQUE KEY `cardTypeName` (`cardTypeName`)) ENGINE=InnoDB "
                                + "DEFAULT CHARSET=latin1 ;";
                        st.executeUpdate(query);


                        query="INSERT INTO `billing_card_type` (`id`, `cardTypeName`, `status`) VALUES "
                        + "(1, 'MasterCard', 1),"
                        + "(2, 'Visa Electron', 1),"
                        + "(3, 'Visa Debit', 1),"
                        + "(4, 'Discover', 1),"
                        + "(5, 'Verve', 1),"
                        + "(6, 'Etranzact', 1);";
                        st.executeUpdate(query);

                        query="CREATE TABLE `billing_cards` ("
                        + "`id` int(11) NOT NULL auto_increment,"
                        + "`user_profile_id` int(11) NOT NULL,"
                        + "`cardTypeId` int(11) NOT NULL,"
                        + "`nameOnCard` varchar(20) NOT NULL,"
                        + "`cardNumber` varchar(20) NOT NULL,"
                        + "`expiryDate` varchar(6) NOT NULL,"
                        + "`status` tinyint(4) NOT NULL,"
                        + "`uniqueId` varchar(100) NOT NULL,"
                        + "`activeYes` tinyint(4) NOT NULL,"
                        + "`dateAdded` datetime NOT NULL,"
                        + "`dateUpdated` datetime NOT NULL,"
                        + "PRIMARY KEY  (`id`),"
                        + "UNIQUE KEY `cardNumber` (`cardNumber`)) ENGINE=InnoDB "
                                + "DEFAULT CHARSET=latin1 ;";
                        st.executeUpdate(query);

                        query="CREATE TABLE `country` ("
                        + "`id` int(11) NOT NULL auto_increment,"
                        + "`name` varchar(64) NOT NULL default '',"
                        + "`iso_code` char(2) NOT NULL default '',"
                        + "PRIMARY KEY  (`id`),"
                        + "UNIQUE KEY `iso_code` (`iso_code`)) ENGINE=InnoDB "
                                + "DEFAULT CHARSET=latin1 ;";
                        st.executeUpdate(query);

                        query="INSERT INTO `country` (`id`, `name`, `iso_code`) VALUES "
                        + "(2, 'USA', 'US'),"
                        + "(3, 'Canada', 'CA'),"
                        + "(4, 'United Kingdom', 'UK'),"
                        + "(5, 'Nigeria', 'NG');";
                        st.executeUpdate(query);

                        query="CREATE TABLE `databasetypes` ("
                        + "`id` int(11) NOT NULL auto_increment,"
                        + "`name` varchar(50) NOT NULL,"
                        + "`version` varchar(20) default NULL,"
                        + "`status` tinyint(4) NOT NULL,"
                        + "PRIMARY KEY  (`id`)) ENGINE=InnoDB DEFAULT CHARSET=latin1 ;";
                        st.executeUpdate(query);


                        query="INSERT INTO `databasetypes` (`id`, `name`, `version`, `status`) VALUES "
                        + "(1, 'MySQL', NULL, 1);";
                        st.executeUpdate(query);


                        query="CREATE TABLE `files` ("
                        + "`id` int(11) NOT NULL auto_increment,"
                        + "`unique_id` varchar(50) NOT NULL,"
                        + "`fileName` varchar(130) NOT NULL,"
                        + "`source_id` int(11) default NULL,"
                        + "`receipient_id` varchar(100) default NULL,"
                        + "`dateUploaded` datetime NOT NULL,"
                        + "`status` varchar(10) NOT NULL default 'Valid',"
                        + "PRIMARY KEY  (`id`)) ENGINE=InnoDB DEFAULT CHARSET=latin1 ;";
                        st.executeUpdate(query);

                        query="CREATE TABLE `quantity` ("
                        + "`id` int(11) NOT NULL auto_increment,"
                        + "`shopItemId` int(11) NOT NULL,"
                        + "`quantity` int(11) NOT NULL,"
                        + "`dateRefilled` datetime NOT NULL,"
                        + "`userId` int(11) NOT NULL,"
                        + "`status` tinyint(4) NOT NULL,"
                        + "PRIMARY KEY  (`id`)) ENGINE=InnoDB DEFAULT CHARSET=latin1 ;";
                        st.executeUpdate(query);


                        query="CREATE TABLE `report_settings` ("
                        + "`id` int(11) NOT NULL auto_increment,"
                        + "`csv` tinyint(4) NOT NULL,"
                        + "`pdf` tinyint(4) NOT NULL,"
                        + "`xls` tinyint(4) NOT NULL,"
                        + "`reportPath` text NOT NULL,"
                        + "`autoYes` tinyint(4) NOT NULL,"
                        + "`autoWhen` varchar(10) NOT NULL,"
                        + "`autoUserReport` tinyint(4) NOT NULL,"
                        + "`autoItemReport` tinyint(4) NOT NULL,"
                        + "`autoSyncReport` tinyint(4) NOT NULL,"
                        + "`userRestrictions` text NOT NULL,"
                        + "PRIMARY KEY  (`id`)) ENGINE=InnoDB DEFAULT CHARSET=latin1 ;";
                        st.executeUpdate(query);

                        query="CREATE TABLE `reports` ("
                        + "`id` int(11) NOT NULL auto_increment,"
                        + "`date_created` datetime NOT NULL,"
                        + "`report_type` varchar(30) NOT NULL,"
                        + "`fileId` int(11) NOT NULL,"
                        + "`fileType` varchar(10) NOT NULL,"
                        + "PRIMARY KEY  (`id`)) ENGINE=InnoDB DEFAULT CHARSET=latin1 ;";
                        st.executeUpdate(query);

                        query="CREATE TABLE `security_questions` ("
                        + "`id` int(11) NOT NULL auto_increment,"
                        + "`question` varchar(40) NOT NULL,"
                        + "PRIMARY KEY  (`id`)) ENGINE=InnoDB DEFAULT CHARSET=latin1 ;";
                        st.executeUpdate(query);

                        query="INSERT INTO `security_questions` (`id`, `question`) VALUES "
                        + "(1, 'What was your childhood nickname'),"
                        + "(2, 'What school did you attend for 6th grade'),"
                        + "(3, 'In what city or town was your first job'),"
                        + "(4, 'What was the name of your first pet');";
                        st.executeUpdate(query);

                        query="CREATE TABLE `settings` ("
                        + "`id` int(11) NOT NULL auto_increment,"
                        + "`defaultFolder` varchar(150) NOT NULL,"
                        + "`dbTypeId` int(11) NOT NULL,"
                        + "`dbUser` varchar(100) NOT NULL,"
                        + "`dbPass` varchar(100) default NULL,"
                        + "`sinkRegularlyYes` tinyint(1) NOT NULL,"
                        + "`dbPort` varchar(11) default NULL,"
                        + "`dbHost` varchar(11) default NULL,"
                        + "PRIMARY KEY  (`id`)) ENGINE=InnoDB DEFAULT CHARSET=latin1 ;";
                        st.executeUpdate(query);

                        query="CREATE TABLE `shop_details` ("
                        + "`id` int(11) NOT NULL auto_increment,"
                        + "`shopName` varchar(50) default NULL,"
                        + "`emailAddress` varchar(70) default NULL,"
                        + "`mobileNumber` varchar(30) default NULL,"
                        + "`addressLine1` varchar(30) default NULL,"
                        + "`addressLine2` varchar(30) default NULL,"
                        + "`details` text,"
                        + "`logoId` int(11) default NULL,"
                        + "`uniqueId` varchar(50) NOT NULL,"
                        + "`dateCreated` datetime NOT NULL,"
                        + "PRIMARY KEY  (`id`)) ENGINE=InnoDB DEFAULT CHARSET=latin1 ;";
                        st.executeUpdate(query);

                        query="CREATE TABLE `shop_item_type` ("
                        + "`id` int(11) NOT NULL auto_increment,"
                        + "`name` varchar(100) NOT NULL,"
                        + "`status` tinyint(4) NOT NULL default '1',"
                        + "`description` text,"
                        + "`systemSpecified` tinyint(4) NOT NULL,"
                        + "PRIMARY KEY  (`id`),"
                        + "UNIQUE KEY `name` (`name`)) ENGINE=InnoDB DEFAULT CHARSET=latin1 ;";
                        st.executeUpdate(query);

                        query="INSERT INTO `shop_item_type` (`id`, `name`, `status`, `description`, "
                                + "`systemSpecified`) VALUES "
                                + "(1, 'General Merchandize', 1, "
                                + "'Category of general shop items. Not editable by anyone', 1);";
                        st.executeUpdate(query);

                        query="CREATE TABLE `shop_items` ("
                        + "`id` int(11) NOT NULL auto_increment,"
                        + "`qr_code` blob NOT NULL,"
                        + "`title` varchar(100) NOT NULL,"
                        + "`price` double(10,2) NOT NULL,"
                        + "`details` text NOT NULL,"
                        + "`uniqueId` varchar(50) NOT NULL,"
                        + "`barCodeNumber` varchar(80) default NULL,"
                        + "`type` varchar(40) NOT NULL,"
                        + "`status` tinyint(4) NOT NULL,"
                        + "`dateUploaded` date NOT NULL,"
                        + "`fileId` int(11) default NULL,"
                        + "PRIMARY KEY  (`id`)) ENGINE=InnoDB DEFAULT CHARSET=latin1 ;";
                        st.executeUpdate(query);

                        query="CREATE TABLE `shop_items_log` ("
                        + "`id` int(11) NOT NULL auto_increment,"
                        + "`shopItemId` int(11) NOT NULL,"
                        + "`timeLogged` varchar(20) NOT NULL,"
                        + "`amountSoldFor` double(10,2) NOT NULL,"
                        + "`uniqueId` varchar(40) NOT NULL,"
                        + "`userId` int(11) NOT NULL,"
                        + "`status` tinyint(4) NOT NULL,"
                        + "PRIMARY KEY  (`id`),"
                        + "UNIQUE KEY `uniqueId` (`uniqueId`,`userId`)) ENGINE=InnoDB DEFAULT CHARSET=latin1 ;";
                        st.executeUpdate(query);

                        query="CREATE TABLE `states` ("
                        + "`id` int(11) NOT NULL auto_increment,"
                        + "`name` varchar(100) NOT NULL,"
                        + "`countryId` varchar(10) NOT NULL,"
                        + "`status` tinyint(4) NOT NULL,"
                        + "PRIMARY KEY  (`id`),"
                        + "UNIQUE KEY `name` (`name`)) ENGINE=InnoDB DEFAULT CHARSET=latin1 ;";
                        st.executeUpdate(query);

                        query="INSERT INTO `states` (`id`, `name`, `countryId`, `status`) VALUES "
                        + "(173, 'England', '4', 1),"
                        + "(174, 'Northern Ireland', '4', 1),"
                        + "(175, 'Scotland', '4', 1),"
                        + "(176, 'Wales', '4', 1),"
                        + "(177, 'Ontario', '3', 1),"
                        + "(178, 'British Columbia', '3', 1),"
                        + "(179, 'Alberta', '3', 1),"
                        + "(180, 'Quebec', '3', 1);";
                        st.executeUpdate(query);

                        query="CREATE TABLE `transaction_type` ("
                        + "`id` int(11) NOT NULL auto_increment,"
                        + "`name` varchar(30) NOT NULL,"
                        + "`amount` double(10,2) NOT NULL,"
                        + "`status` tinyint(4) NOT NULL,"
                        + "PRIMARY KEY  (`id`),"
                        + "UNIQUE KEY `name` (`name`)) ENGINE=InnoDB DEFAULT CHARSET=latin1 ;";
                        st.executeUpdate(query);

                        query="INSERT INTO `transaction_type` (`id`, `name`, `amount`, `status`) VALUES "
                        + "(1, 'Add Medication Charges', 2.00, 1);";
                        st.executeUpdate(query);

                        query="CREATE TABLE `user_profile` ("
                        + "`id` int(11) NOT NULL auto_increment,"
                        + "`first_name` varchar(20) NOT NULL,"
                        + "`last_name` varchar(20) NOT NULL,"
                        + "`other_name` varchar(20) default NULL,"
                        + "`email_address` varchar(50) NOT NULL,"
                        + "`contact_address_id` int(11) default NULL,"
                        + "`mobile_number` varchar(33) default NULL,"
                        + "`sex` enum('Female','Male') default NULL,"
                        + "`date_created` datetime NOT NULL,"
                        + "`password` varchar(50) NOT NULL,"
                        + "`key` varchar(60) NOT NULL,"
                        + "`nhsNumber` varchar(30) default NULL,"
                        + "`securityQuestionId` int(11) NOT NULL,"
                        + "`securityQuestionAnswer` varchar(100) NOT NULL,"
                        + "`dateUpdated` datetime default NULL,"
                        + "`userTypeId` int(11) NOT NULL,"
                        + "`fileId` int(11) default NULL,"
                        + "`confirmationCode` varchar(100) NOT NULL,"
                        + "PRIMARY KEY  (`id`),"
                        + "UNIQUE KEY `email_address` (`email_address`)) ENGINE=InnoDB DEFAULT CHARSET=latin1 ;";
                        st.executeUpdate(query);

                        query="CREATE TABLE `user_type` ("
                        + "`id` int(11) NOT NULL auto_increment,"
                        + "`usertype` varchar(30) NOT NULL,"
                        + "`superiorityLevel` int(11) default NULL,"
                        + "`status` tinyint(4) NOT NULL,"
                        + "PRIMARY KEY  (`id`),"
                        + "UNIQUE KEY `usertype` (`usertype`)) ENGINE=InnoDB DEFAULT CHARSET=latin1 ;";
                        st.executeUpdate(query);

                        query="INSERT INTO `user_type` (`id`, `usertype`, `superiorityLevel`, `status`) VALUES "
                        + "(3, 'Administrator', 1, 1);";
                        st.executeUpdate(query);


                        PreparedStatement pr=con.prepareStatement("INSERT INTO settings (`id`, `defaultFolder`, `dbTypeId`, `dbUser`, "
                                + "`dbPass`, `sinkRegularlyYes`, `dbPort`, `dbHost`) VALUES "
                                + "(null, ?, ?, ?, ?, ?, ?, ?)", Statement.RETURN_GENERATED_KEYS);
                        

                        pr.setString(1, installFolder);
                        pr.setInt(2, dbType);
                        pr.setString(3, dbUser);
                        pr.setString(4, dbPass);
                        int checked=0;
                        if(sinkYes==true)
                        {
                            checked=1;
                        }
                        pr.setInt(5, checked);
                        pr.setString(6, dbPort);
                        pr.setString(7, dbHost);
                        
                        
                        int addCount = pr.executeUpdate();

                        ResultSet res = pr.getGeneratedKeys();
                        //System.out.println("ajsd" + res.getStatement().toString());
                        int installId=-1;
                        while (res.next()){
                            installId=res.getInt(1);}
                        
                        if(installId>0)
                        {
                            
                            //WinRegistry.deleteKey(WinRegistry.HKEY_CURRENT_USER, "Software\\ShopScan Manager");
                            WinRegistry.createKey(WinRegistry.HKEY_CURRENT_USER, "Software\\ShopScan Manager");
                            
                            WinRegistry.writeStringValue(WinRegistry.HKEY_CURRENT_USER, "Software\\ShopScan Manager", "dbHost", dbHost);
                            WinRegistry.writeStringValue(WinRegistry.HKEY_CURRENT_USER, "Software\\ShopScan Manager", "dbPass", dbPass);
                            WinRegistry.writeStringValue(WinRegistry.HKEY_CURRENT_USER, "Software\\ShopScan Manager", "dbPort", dbPort);
                            WinRegistry.writeStringValue(WinRegistry.HKEY_CURRENT_USER, "Software\\ShopScan Manager", "dbType", Integer.toString(dbType));
                            WinRegistry.writeStringValue(WinRegistry.HKEY_CURRENT_USER, "Software\\ShopScan Manager", "dbUser", dbUser);
                            WinRegistry.writeStringValue(WinRegistry.HKEY_CURRENT_USER, "Software\\ShopScan Manager", "installPath",installFolder);
                            System.out.println("Write this to the registry=" + installFolder);
                            /*RegistryKey r=new RegistryKey(RootKey.HKEY_CURRENT_USER,"Software\\ShopScan Manager");
                            RegistryValue v1=new RegistryValue("dbHost",ValueType.REG_SZ,dbHost);
                            RegistryValue v2=new RegistryValue("dbPass",ValueType.REG_SZ,dbPass);
                            RegistryValue v3=new RegistryValue("dbPort",ValueType.REG_SZ,dbPort);
                            RegistryValue v4=new RegistryValue("dbType",ValueType.REG_SZ,dbType);
                            RegistryValue v5=new RegistryValue("dbUser",ValueType.REG_SZ,dbUser);
                            RegistryValue v6=new RegistryValue("installPath",ValueType.REG_SZ,dbUser);
                            r.setValue(v1);
                            r.setValue(v2);
                            r.setValue(v3);
                            r.setValue(v4);
                            r.setValue(v5);
                            r.setValue(v6);*/

                            processResult.put("success", true);
                            processResult.put("message", "Settings Saved");
                            processResult.put("operation", "Setting Up Application...");
                            /*Frame[] f=HomeScreen.getFrames();
                            for(int count5=0; count5<f.length; count5++)
                            {
                                System.out.println(f[count5].toString());
                                HomeScreen h=((HomeScreen)f[count5]);*/
                                this.hs.displaySetUpShop(this.con, this.mysql, installFolder);
                            //}
                        }
                        else
                        {
                            processResult.put("success", false);
                            processResult.put("message", "Error encountered saving settings");
                            processResult.put("operation", "Setting Up Application...");
                            /*Frame[] f=HomeScreen.getFrames();
                            for(int count5=0; count5<f.length; count5++)
                            {
                                System.out.println(f[count5].toString());
                                HomeScreen h=((HomeScreen)f[count5]);*/
                                this.hs.displayProcessMessage(processResult);
                            //}
                        }
                        
                    } catch (IllegalArgumentException ex) {
                        new UtilUse().Log(ex);
                        Logger.getLogger(Settings.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (IllegalAccessException ex) {
                        new UtilUse().Log(ex);
                        Logger.getLogger(Settings.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (InvocationTargetException ex) {
                        new UtilUse().Log(ex);
                        Logger.getLogger(Settings.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (Exception ex) {
                        Logger.getLogger(Settings.class.getName()).log(Level.SEVERE, null, ex);
                        processResult.put("success", false);
                        processResult.put("message", "Error encountered saving settings");
                        processResult.put("operation", "Setting Up Application...");
                        this.hs.displayProcessMessage(processResult);
                          
                    } 
                }
                else
                {
                    processResult.put("success", false);
                    processResult.put("message", "No database user selected. Default is root");
                    processResult.put("operation", "Setting Up Application...");
                    /*Frame[] f=HomeScreen.getFrames();
                            for(int count5=0; count5<f.length; count5++)
                            {
                                System.out.println(f[count5].toString());
                                HomeScreen h=((HomeScreen)f[count5]);*/
                                this.hs.displayProcessMessage(processResult);
                            //}
                }
            }
            else
            {
                processResult.put("success", false);
                processResult.put("message", "No database selected. Select One.");
                processResult.put("operation", "Setting Up Application...");
                /*Frame[] f=HomeScreen.getFrames();
                            for(int count5=0; count5<f.length; count5++)
                            {
                                System.out.println(f[count5].toString());
                                HomeScreen h=((HomeScreen)f[count5]);*/
                                this.hs.displayProcessMessage(processResult);
                            //}
            }
        }
        else
        {
            processResult.put("success", false);
            processResult.put("message", "No directory selected to save your files. Select one");
            processResult.put("operation", "Setting Up Application...");
            /*Frame[] f=HomeScreen.getFrames();
                            for(int count5=0; count5<f.length; count5++)
                            {
                                System.out.println(f[count5].toString());
                                HomeScreen h=((HomeScreen)f[count5]);*/
                                this.hs.displayProcessMessage(processResult);
                            //}
        }
        //String installFolder=this.jTextField6.getText().toString().trim();
        /*Hashtable h1 = RefillQuantity.this.refillProcess(RefillQuantity.this.con, RefillQuantity.this.mysql);
        Frame[] f = HomeScreen.getFrames();
        AddNewItem addNewItem = new AddNewItem();

        for (int count5 = 0; count5 < f.length; count5++) {
            System.out.println(f[count5].toString());
            HomeScreen h = ((HomeScreen) f[count5]);

            h.displayProcessMessage(h1);
        }*/
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField3ActionPerformed

    private void jTextField5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField5ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try {
            // TODO add your handling code here:
            File file=new UtilUse().getDirectoryChoice((Component)evt.getSource(), new JFileChooser(),
                    new File(new UtilUse().GetMyDocuments()), "Select a folder location");
            this.fileSelected=file.getCanonicalPath();
            this.jTextField6.setText(fileSelected);
            //System.err.println(file.getAbsoluteFile() + " and " + file.getCanonicalPath() + " and " + file.getCanonicalFile());
        } catch (IOException ex) {
            new UtilUse().Log(ex);
            Logger.getLogger(Settings.class.getName()).log(Level.SEVERE, null, ex);
        }catch (Exception ex) {
            new UtilUse().Log(ex);
            Logger.getLogger(Settings.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jTextField6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField6ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField6ActionPerformed

    private void jTextField4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField4ActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void jTextField7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField7ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField7ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel55;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    // End of variables declaration//GEN-END:variables
}
